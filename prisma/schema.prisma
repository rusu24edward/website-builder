// Prisma schema for the website builder platform. This uses PostgreSQL
// as the underlying database. You can add or modify models to suit
// your needs. Run `pnpm prisma migrate dev` inside apps/api to
// generate and apply migrations.

generator client {
  provider = "prisma-client-js"
  output   = "../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  projects  Project[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id         String    @id @default(uuid())
  name       String
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  siteSpecs  SiteSpec[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model SiteSpec {
  id         String    @id @default(uuid())
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  version    Int
  spec       Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([projectId, version])
}

/// An uploaded file associated with a project. Used for storing inspiration images or other assets.
model Upload {
  id         String    @id @default(uuid())
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  key        String
  filename   String
  mime       String
  size       Int
  createdAt  DateTime  @default(now())
}

/// A questionnaire/intake session. Keeps track of the current question index and whether the session is completed.
model IntakeSession {
  id            String    @id @default(uuid())
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  currentIndex  Int       @default(0)
  completed     Boolean   @default(false)
  messages      IntakeMessage[]
  answers       QuestionnaireAnswer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

/// Individual chat messages exchanged between the user and system in a session.
model IntakeMessage {
  id         String        @id @default(uuid())
  session    IntakeSession @relation(fields: [sessionId], references: [id])
  sessionId  String
  role       String
  content    String
  createdAt  DateTime      @default(now())
}

/// A key/value answer collected during an intake session.
model QuestionnaireAnswer {
  id        String        @id @default(uuid())
  session   IntakeSession @relation(fields: [sessionId], references: [id])
  sessionId String
  key       String
  value     String
  createdAt DateTime      @default(now())
}

/// A build record representing the generation of a website from a spec.
model Build {
  id         String    @id @default(uuid())
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  status     String    @default("pending")
  buildDir   String?
  zipPath    String?
  log        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
